// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addDebt = `-- name: AddDebt :one
INSERT INTO debts (
    amount, description, user_id
) VALUES (
    $1, $2, $3
) RETURNING id, amount, description, date, user_id
`

type AddDebtParams struct {
	Amount      int64
	Description string
	UserID      pgtype.Int4
}

func (q *Queries) AddDebt(ctx context.Context, arg AddDebtParams) (Debt, error) {
	row := q.db.QueryRow(ctx, addDebt, arg.Amount, arg.Description, arg.UserID)
	var i Debt
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Description,
		&i.Date,
		&i.UserID,
	)
	return i, err
}

const addPlayer = `-- name: AddPlayer :one
INSERT INTO players (
    name
) VALUES (
    $1
) RETURNING id, name
`

func (q *Queries) AddPlayer(ctx context.Context, name string) (Player, error) {
	row := q.db.QueryRow(ctx, addPlayer, name)
	var i Player
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getDebt = `-- name: GetDebt :one
SELECT id, amount, description, date, user_id FROM debts
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetDebt(ctx context.Context, userID pgtype.Int4) (Debt, error) {
	row := q.db.QueryRow(ctx, getDebt, userID)
	var i Debt
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Description,
		&i.Date,
		&i.UserID,
	)
	return i, err
}

const getIdOfPlayer = `-- name: GetIdOfPlayer :one
SELECT id FROM players
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetIdOfPlayer(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, getIdOfPlayer, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}
